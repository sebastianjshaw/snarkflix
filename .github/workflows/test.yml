# Snarkflix Test Workflow
name: Snarkflix Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20, 21]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint || echo "Linting not configured yet"
      continue-on-error: true
      
    - name: Run unit tests
      run: npm run test:ci
      
    - name: Run performance tests
      run: npm run test:ci -- --testPathPattern=performance
      
    - name: Run accessibility tests
      run: npm run test:ci -- --testPathPattern=accessibility
      
    - name: Generate coverage report
      run: npm run test:coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Upload coverage reports to GitHub
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.node-version }}
        path: coverage/
        
    - name: Comment PR with coverage
      if: github.event_name == 'pull_request'
      uses: romeovs/lcov-reporter-action@v0.3.1
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        lcov-file: ./coverage/lcov.info
        delete-old-comments: true

  build:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Generate review pages
      run: npm run build
      
    - name: Optimize images
      run: npm run optimize-images || echo "Image optimization not configured"
      continue-on-error: true
      
    - name: Deploy to Netlify
      uses: nwtgck/actions-netlify@v2.0
      with:
        publish-dir: '.'
        production-branch: main
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "Deploy from GitHub Actions"
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  lighthouse:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Start local server
      run: |
        npm run serve &
        sleep 10
        
    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './.lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true
        
    - name: Comment PR with Lighthouse results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Read Lighthouse results
          const resultsPath = path.join(process.cwd(), '.lighthouseci');
          if (fs.existsSync(resultsPath)) {
            const files = fs.readdirSync(resultsPath);
            const jsonFile = files.find(file => file.endsWith('.json'));
            
            if (jsonFile) {
              const results = JSON.parse(fs.readFileSync(path.join(resultsPath, jsonFile), 'utf8'));
              
              const comment = `## ðŸš€ Lighthouse Performance Audit
              
              **Performance Score:** ${results.lhr.categories.performance.score * 100}/100
              **Accessibility Score:** ${results.lhr.categories.accessibility.score * 100}/100
              **Best Practices Score:** ${results.lhr.categories['best-practices'].score * 100}/100
              **SEO Score:** ${results.lhr.categories.seo.score * 100}/100
              
              ### Key Metrics:
              - **First Contentful Paint:** ${results.lhr.audits['first-contentful-paint'].displayValue}
              - **Largest Contentful Paint:** ${results.lhr.audits['largest-contentful-paint'].displayValue}
              - **Cumulative Layout Shift:** ${results.lhr.audits['cumulative-layout-shift'].displayValue}
              - **Speed Index:** ${results.lhr.audits['speed-index'].displayValue}
              
              [View full report](${results.lhr.finalUrl})`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
          }
